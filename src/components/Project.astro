---
import type { Project, ProjectsSection } from '@/types/content.d.ts'

import Description from '@/components/Description.astro'
import LabelledValue from '@/components/LabelledValue.astro'
import LinkButton from '@/components/LinkButton.astro'
import Photo from '@/components/Photo.astro'
import TagsList from '@/components/TagsList.astro'
import Thumbnail from '@/components/Thumbnail.astro'
import Timestamp from '@/components/Timestamp.astro'
import Typography from '@/components/Typography.astro'
import { nanoid } from 'nanoid'

export interface Props extends Project {
  screenshotsConfig?: ProjectsSection['config']['screenshots']
}

const {
  dates,
  description,
  details,
  image,
  links,
  name,
  tagsList,
  screenshots,
  screenshotsConfig,
} = Astro.props

const alt = `${name} project thumbnail`

const galleryId = nanoid(8)
const hasScreenshots = screenshots?.length && screenshots.length > 0
const screenshotsIcon = screenshotsConfig?.icon || 'fa6-solid:image'
const screenshotsTooltip = screenshotsConfig?.title || 'Screenshots'
---

<div class="flex flex-col gap-6">
  <div class="flex flex-col gap-4">
    <div class="flex gap-6">
      <div class="flex w-full flex-col gap-4">
        <div class="flex gap-4">
          {image && <Thumbnail src={image} alt={alt} size="small" />}
          <div class="flex w-full justify-between">
            <div>
              <Typography variant="item-title">{name}</Typography>
              <Timestamp dates={dates} />
            </div>
            <div class="flex gap-2">
              {links.map((link) => <LinkButton {...link} />)}
              {
                hasScreenshots && (
                  <LinkButton
                    icon={screenshotsIcon}
                    name={screenshotsTooltip}
                    as="button"
                    data-gallery={galleryId}
                  />
                )
              }
            </div>
          </div>
        </div>
        <div class="inline-grid w-full xl:grid-cols-[auto_auto]">
          {details.map((detail) => <LabelledValue {...detail} />)}
        </div>
      </div>
    </div>
    <Description content={description} class="col-span-3 col-start-1" />
  </div>
  <TagsList {...tagsList} />
  <div class="hidden" id={galleryId}>
    {
      screenshots?.map((screenshot) => (
        <Photo src={screenshot.image} alt={screenshot.alt} />
      ))
    }
  </div>
</div>

<script>
  import type { DataSource, PhotoSwipeOptions } from 'photoswipe'

  const buttons = [
    ...document.querySelectorAll('[data-gallery]'),
  ] as HTMLButtonElement[]

  if (buttons.length > 0) {
    import('photoswipe/style.css')

    const getOptionsForButton = (
      button: HTMLButtonElement,
    ): PhotoSwipeOptions => {
      const galleryId = String(button.dataset.gallery)
      const galleryWrapper = document.getElementById(galleryId) as HTMLElement
      const screenshots = [...galleryWrapper.children] as HTMLImageElement[]
      const dataSource: DataSource = screenshots.map((img) => ({
        src: img.src,
        width: img.width,
        height: img.height,
        alt: img.alt,
      }))

      return { dataSource, showHideAnimationType: 'none', index: 0 }
    }

    import('photoswipe').then(({ default: PhotoSwipe }) => {
      buttons.forEach((button) =>
        button.addEventListener('click', () => {
          new PhotoSwipe(getOptionsForButton(button)).init()
        }),
      )
    })
  }
</script>
